{% doc %}
  @prompt
    a slider with 4 to 8 products that can be choosen one by one or by selecting a collection.
The product cards will show only the picture, title and product price, and there is a quick add to cart from the bottom of each card

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-product-slider-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    overflow: hidden;
  }

  .ai-product-slider__header-{{ ai_gen_id }} {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
  }

  .ai-product-slider__title-{{ ai_gen_id }} {
    font-size: {{ block.settings.heading_size }}px;
    margin: 0;
    color: {{ block.settings.heading_color }};
  }

  .ai-product-slider__controls-{{ ai_gen_id }} {
    display: flex;
    gap: 10px;}

  .ai-product-slider__button-{{ ai_gen_id }} {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border: 1px solid {{ block.settings.button_border_color }};
    background-color: {{ block.settings.button_background_color }};
    border-radius: 50%;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .ai-product-slider__button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.button_hover_color }};
  }

  .ai-product-slider__button-{{ ai_gen_id }} svg {
    width: 20px;
    height: 20px;
    fill: none;
    stroke: {{ block.settings.button_text_color }};
    stroke-width: 2;
    stroke-linecap: round;
    stroke-linejoin: round;
  }

  .ai-product-slider__track-{{ ai_gen_id }} {
    display: flex;
    gap: 20px;
    transition: transform 0.5s ease;
  }

  .ai-product-slider__slide-{{ ai_gen_id }} {
    flex: 0 0 calc((100% - ({{ block.settings.products_per_view }} - 1) * 20px) / {{ block.settings.products_per_view }});
    min-width: 0;
  }

  .ai-product-card-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    height: 100%;
    border-radius: {{ block.settings.card_border_radius }}px;
    overflow: hidden;
    background-color: {{ block.settings.card_background_color }};
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease, box-shadow 0.3s ease;position: relative;
  }

  .ai-product-card-{{ ai_gen_id }}:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  }

  .ai-product-card__image-container-{{ ai_gen_id }} {
    position: relative;
    padding-bottom: 100%;
    overflow: hidden;
  }

  .ai-product-card__image-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s ease;
  }

  .ai-product-card-{{ ai_gen_id }}:hover .ai-product-card__image-{{ ai_gen_id }} {
    transform: scale(1.05);
  }

  .ai-product-card__image-placeholder-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f4f4f4;}

  .ai-product-card__image-placeholder-{{ ai_gen_id }} svg {
    width: 70%;
    height: 70%;
  }

  .ai-product-card__content-{{ ai_gen_id }} {
    padding: 15px;
    display: flex;
    flex-direction: column;
    flex-grow: 1;
  }

  .ai-product-card__title-{{ ai_gen_id }} {
    font-size: {{ block.settings.product_title_size }}px;
    font-weight: 500;
    margin: 0 0 8px;
    color: {{ block.settings.product_title_color }};
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .ai-product-card__price-{{ ai_gen_id }} {
    font-size: {{ block.settings.product_price_size }}px;
    color: {{ block.settings.product_price_color }};
    margin: 0;}

  .ai-product-card__price-compare-{{ ai_gen_id }} {
    font-size: calc({{ block.settings.product_price_size }}px * 0.85);
    color: {{ block.settings.product_compare_price_color }};
    text-decoration: line-through;
    margin-right: 5px;
  }

  .ai-product-card__add-to-cart-{{ ai_gen_id }} {
    margin-top: 15px;
    padding: 10px;
    background-color: {{ block.settings.add_to_cart_background_color }};
    color: {{ block.settings.add_to_cart_text_color }};
    border: none;
    border-radius: {{ block.settings.add_to_cart_border_radius }}px;
    cursor: pointer;
    font-weight: 500;
    transition: background-color 0.3s ease;
  }

  .ai-product-card__add-to-cart-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.add_to_cart_hover_color }};
  }

  .ai-product-card__add-to-cart-{{ ai_gen_id }}:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
  }

  .ai-product-card__add-to-cart-message-{{ ai_gen_id }} {
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    background-color: {{ block.settings.add_to_cart_background_color }};
    color: {{ block.settings.add_to_cart_text_color }};
    padding: 5px 10px;
    border-radius: 4px;
    font-size: 12px;
    white-space: nowrap;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
    z-index: 5;
  }

  .ai-product-card__add-to-cart-message-{{ ai_gen_id }}.show {
    opacity: 1;
    visibility: visible;
  }

  @media screen and (max-width: 749px) {
    .ai-product-slider__slide-{{ ai_gen_id }} {
      flex: 0 0 calc((100% - ({{ block.settings.products_per_view_mobile }} - 1) * 20px) / {{ block.settings.products_per_view_mobile }});
    }
    
    .ai-product-slider__title-{{ ai_gen_id }} {
      font-size: calc({{ block.settings.heading_size }}px * 0.8);
    }
    
    .ai-product-card__title-{{ ai_gen_id }} {
      font-size: calc({{ block.settings.product_title_size }}px * 0.9);
    }
  }
{% endstyle %}

<div class="ai-product-slider-{{ ai_gen_id }}" {{ block.shopify_attributes }}>
  {% if block.settings.title != blank %}
    <div class="ai-product-slider__header-{{ ai_gen_id }}">
      <h2 class="ai-product-slider__title-{{ ai_gen_id }}">{{ block.settings.title }}</h2><div class="ai-product-slider__controls-{{ ai_gen_id }}">
        <button class="ai-product-slider__button-{{ ai_gen_id }} ai-product-slider__button-prev-{{ ai_gen_id }}" aria-label="Previous products">
          <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path d="M15 6l-6 6 6 6"></path>
          </svg>
        </button>
        <button class="ai-product-slider__button-{{ ai_gen_id }} ai-product-slider__button-next-{{ ai_gen_id }}" aria-label="Next products">
          <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path d="M9 6l6 6-6 6"></path>
          </svg>
        </button>
      </div>
    </div>
  {% endif %}

  <div class="ai-product-slider__track-container-{{ ai_gen_id }}" style="overflow: hidden;">
    <div class="ai-product-slider__track-{{ ai_gen_id }}">
      {% liquid
        if block.settings.source == 'collection' and block.settings.collection != blank
          assign products = block.settings.collection.products
        elsif block.settings.source == 'products' and block.settings.product_list != blank
          assign products = block.settings.product_list
        else
          assign products = collections.all.products | limit: 8
        endif
        
        assign product_limit = block.settings.product_limit | at_most: 8
      %}

      {% for product in products limit: product_limit %}
        <div class="ai-product-slider__slide-{{ ai_gen_id }}">
          <div class="ai-product-card-{{ ai_gen_id }}">
            <a href="{{ product.url }}" class="ai-product-card__image-container-{{ ai_gen_id }}">
              {% if product.featured_image %}
                <img 
                  src="{{ product.featured_image | image_url: width: 500 }}"
                  alt="{{ product.featured_image.alt | escape }}"
                  class="ai-product-card__image-{{ ai_gen_id }}"
                  loading="lazy"
                  width="{{ product.featured_image.width }}"
                  height="{{ product.featured_image.height }}"
                >
              {% else %}
                <div class="ai-product-card__image-placeholder-{{ ai_gen_id }}">
                  {{ 'product-apparel-1' | placeholder_svg_tag }}
                </div>
              {% endif %}
            </a><div class="ai-product-card__content-{{ ai_gen_id }}">
              <h3 class="ai-product-card__title-{{ ai_gen_id }}">
                <a href="{{ product.url }}">{{ product.title }}</a>
              </h3>
              <div class="ai-product-card__price-{{ ai_gen_id }}">
                {% if product.compare_at_price > product.price %}
                  <span class="ai-product-card__price-compare-{{ ai_gen_id }}">{{ product.compare_at_price | money }}</span>
                {% endif %}
                <span>{{ product.price | money }}</span>
              </div>
              <button 
                class="ai-product-card__add-to-cart-{{ ai_gen_id }}" 
                data-product-id="{{ product.id }}"
                data-variant-id="{{ product.selected_or_first_available_variant.id }}"
                {% unless product.available %}disabled{% endunless %}
              >
                {% if product.available %}
                  {{ block.settings.add_to_cart_text }}
                {% else %}
                  {{ block.settings.sold_out_text }}
                {% endif %}
              </button><div class="ai-product-card__add-to-cart-message-{{ ai_gen_id }}">{{ block.settings.added_to_cart_text }}</div>
            </div>
          </div>
        </div>
      {% endfor %}
    </div>
  </div>
</div>

<script>
  (function() {
    class ProductSlider extends HTMLElement {
      constructor() {
        super();
        this.track = this.querySelector('.ai-product-slider__track-{{ ai_gen_id }}');
        this.slides = this.querySelectorAll('.ai-product-slider__slide-{{ ai_gen_id }}');
        this.prevButton = this.querySelector('.ai-product-slider__button-prev-{{ ai_gen_id }}');
        this.nextButton = this.querySelector('.ai-product-slider__button-next-{{ ai_gen_id }}');
        this.addToCartButtons = this.querySelectorAll('.ai-product-card__add-to-cart-{{ ai_gen_id }}');
        this.currentPosition = 0;
        this.slidesPerView = window.innerWidth <= 749 ? {{ block.settings.products_per_view_mobile }} : {{ block.settings.products_per_view }};
        this.slideWidth = 0;
        this.maxPosition = Math.max(0, this.slides.length - this.slidesPerView);
      }

      connectedCallback() {
        this.setupEventListeners();
        this.calculateSlideWidth();
        this.updateButtonState();
        window.addEventListener('resize', this.handleResize.bind(this));
      }

      setupEventListeners() {
        if (this.prevButton) {
          this.prevButton.addEventListener('click', this.prev.bind(this));
        }
        
        if (this.nextButton) {
          this.nextButton.addEventListener('click', this.next.bind(this));
        }
        
        this.addToCartButtons.forEach(button => {
          button.addEventListener('click', this.handleAddToCart.bind(this));
        });
      }

      calculateSlideWidth() {
        if (this.slides.length === 0) return;
        
        this.slidesPerView = window.innerWidth <= 749 ? {{ block.settings.products_per_view_mobile }} : {{ block.settings.products_per_view }};
        this.maxPosition = Math.max(0, this.slides.length - this.slidesPerView);
        
        // Reset position if it exceeds the new maxPosition
        if (this.currentPosition > this.maxPosition) {
          this.currentPosition = this.maxPosition;
          this.updateSlidePosition();
        }}

      handleResize() {
        const oldSlidesPerView = this.slidesPerView;
        this.calculateSlideWidth();
        
        if (oldSlidesPerView !== this.slidesPerView) {
          this.updateSlidePosition();this.updateButtonState();
        }
      }

      prev() {
        if (this.currentPosition > 0) {
          this.currentPosition--;
          this.updateSlidePosition();
          this.updateButtonState();
        }
      }

      next() {
        if (this.currentPosition < this.maxPosition) {
          this.currentPosition++;
          this.updateSlidePosition();
          this.updateButtonState();
        }
      }

      updateSlidePosition() {
        const slideWidth = 100 / this.slidesPerView;
        const gapPercentage = (20 * (this.slidesPerView - 1)) / this.track.offsetWidth * 100;
        const offset = this.currentPosition * (slideWidth + gapPercentage / this.slidesPerView);
        this.track.style.transform = `translateX(-${offset}%)`;
      }

      updateButtonState() {
        if (this.prevButton) {
          this.prevButton.disabled = this.currentPosition === 0;
          this.prevButton.style.opacity = this.currentPosition === 0 ? '0.5' : '1';
        }
        
        if (this.nextButton) {
          this.nextButton.disabled = this.currentPosition >= this.maxPosition;
          this.nextButton.style.opacity = this.currentPosition >= this.maxPosition ? '0.5' : '1';
        }
      }

      handleAddToCart(event) {
        const button = event.currentTarget;
        const productId = button.dataset.productId;
        const variantId = button.dataset.variantId;
        const messageElement = button.nextElementSibling;
        
        if (!productId || !variantId) return;
        
        button.disabled = true;
        button.textContent = '{{ block.settings.adding_to_cart_text }}';
        
        fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            items: [{
              id: variantId,
              quantity: 1
            }]
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.status && data.status !== 200) {
            throw new Error(data.description || 'Error adding product to cart');
          }
          
          button.textContent = '{{ block.settings.added_to_cart_text }}';
          if (messageElement) {
            messageElement.classList.add('show');
            setTimeout(() => {
              messageElement.classList.remove('show');
              button.textContent = '{{ block.settings.add_to_cart_text }}';
              button.disabled = false;
            }, 2000);
          } else {
            setTimeout(() => {
              button.textContent = '{{ block.settings.add_to_cart_text }}';
              button.disabled = false;
            }, 2000);
          }
        })
        .catch(error => {
          console.error('Error:', error);
          button.textContent = '{{ block.settings.add_to_cart_text }}';
          button.disabled = false;
        });
      }
    }

    customElements.define('product-slider-{{ ai_gen_id }}', ProductSlider);

    // Initialize all sliders
    document.querySelectorAll('.ai-product-slider-{{ ai_gen_id }}').forEach(slider => {
      if (!slider.matches(':defined')) {
        Object.setPrototypeOf(slider, ProductSlider.prototype);
        slider.connectedCallback();
      }
    });
  })();
</script>

{% schema %}
{
  "name": "Product Slider",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Heading",
      "default": "Featured Products"
    },
    {
      "type": "select",
      "id": "source",
      "label": "Product source",
      "options": [
        {
          "value": "collection",
          "label": "Collection"
        },
        {
          "value": "products",
          "label": "Specific products"
        }
      ],
      "default": "collection"
    },
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection"
    },
    {
      "type": "product_list",
      "id": "product_list",
      "label": "Products",
      "limit": 8
    },
    {
      "type": "range",
      "id": "product_limit",
      "min": 4,
      "max": 8,
      "step": 1,
      "label": "Number of products",
      "default": 6
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "products_per_view",
      "min": 2,
      "max": 5,
      "step": 1,
      "label": "Products per row",
      "default": 4
    },
    {
      "type": "range",
      "id": "products_per_view_mobile",
      "min": 1,
      "max": 3,
      "step": 1,
      "label": "Products per row on mobile",
      "default": 2
    },
    {
      "type": "header",
      "content": "Product Card"
    },
    {
      "type": "range",
      "id": "card_border_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Card border radius",
      "default": 8
    },
    {
      "type": "color",
      "id": "card_background_color",
      "label": "Card background color",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 16,
      "max": 40,
      "step": 1,
      "unit": "px",
      "label": "Heading size",
      "default": 24
    },
    {
      "type": "range",
      "id": "product_title_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Product title size",
      "default": 16
    },
    {
      "type": "range",
      "id": "product_price_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Product price size",
      "default": 16
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Heading color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "product_title_color",
      "label": "Product title color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "product_price_color",
      "label": "Product price color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "product_compare_price_color",
      "label": "Compare at price color",
      "default": "#999999"
    },
    {
      "type": "header",
      "content": "Navigation Buttons"
    },
    {
      "type": "color",
      "id": "button_background_color",
      "label": "Button background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "button_border_color",
      "label": "Button border color",
      "default": "#e0e0e0"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button icon color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_hover_color",
      "label": "Button hover color",
      "default": "#f5f5f5"
    },
    {
      "type": "header",
      "content": "Add to Cart"
    },
    {
      "type": "text",
      "id": "add_to_cart_text",
      "label": "Add to cart text",
      "default": "Add to cart"
    },
    {
      "type": "text",
      "id": "adding_to_cart_text",
      "label": "Adding to cart text",
      "default": "Adding..."
    },
    {
      "type": "text",
      "id": "added_to_cart_text",
      "label": "Added to cart text",
      "default": "Added to cart"
    },
    {
      "type": "text",
      "id": "sold_out_text",
      "label": "Sold out text",
      "default": "Sold out"
    },
    {
      "type": "color",
      "id": "add_to_cart_background_color",
      "label": "Add to cart background color",
      "default": "#000f9f"
    },
    {
      "type": "color",
      "id": "add_to_cart_text_color",
      "label": "Add to cart text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "add_to_cart_hover_color",
      "label": "Add to cart hover color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "add_to_cart_border_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Add to cart border radius",
      "default": 4
    }
  ],
  "presets": [
    {
      "name": "Product Slider"
    }
  ]
}
{% endschema %}